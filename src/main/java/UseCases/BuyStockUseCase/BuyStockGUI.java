package UseCases.BuyStockUseCase;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;

public class BuyStockGUI extends JFrame implements iBuyStockGUI {
    /**
     * GUI where the user can purchase stocks
     */
    private JButton buyButton;
    private JTextField quantityField;
    private JLabel buyStockLabel;
    private JLabel quantityLabel;
    private JLabel responseLabel;
    private JLabel symbolLabel;
    private JButton goBackButton;
    private JPanel mainPanel;
    private JLabel balanceLabel;
    private int quantity;
    private double balance;
    private final String symbol;

    public BuyStockGUI(String symbol, int quantity, double balance) {
        super();
        this.quantity = quantity;
        this.balance = balance;
        this.symbol = symbol;
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(mainPanel);
        this.symbolLabel.setText(symbol + " (Currently have: " + quantity + ")");
        this.balanceLabel.setText("Balance: $" + balance);
        this.responseLabel.setText("");
        this.pack();
        this.setVisible(true);
    }

    @Override
    public void addBuyAction(Runnable onBuy) {
        buyButton.addActionListener(e -> onBuy.run());
    }

    @Override
    public void addGoBackAction(Runnable onBack) {
        goBackButton.addActionListener(e -> onBack.run());
    }

    @Override
    public void close() {
        dispose();
    }

    @Override
    public void displayBalanceFailure() {
        JOptionPane.showMessageDialog(null, "Insufficient balance.");
    }

    @Override
    public void displayConnectionFailure() {
        JOptionPane.showMessageDialog(null, "There was a problem connecting to the stock price service.");
    }

    @Override
    public void displayInvalidInputFailure() {
        JOptionPane.showMessageDialog(null, "Please enter a positive integer.");
    }

    @Override
    public void displaySuccess() {
        JOptionPane.showMessageDialog(null, "Purchase successful!");
    }

    @Override
    public String getSymbol() {
        return this.symbol;
    }

    @Override
    public int getQuantity() throws NumberFormatException {
        return Integer.parseInt(this.quantityField.getText());
    }

    @Override
    public void updateQuantityLabel(int quant) {
        this.setVisible(true);
        this.quantity += quant;
        this.symbolLabel.setText(symbol + " (Currently have: " + this.quantity + ")");
    }

    @Override
    public double getBalance() {
        String num = this.balanceLabel.getText().replaceAll("[^0-9.]+", " ").trim();
        return Double.parseDouble(num);
    }
    @Override
    public void updateBalanceLabel(double balance) {
        this.setVisible(true);
        this.balance = balance;
        this.balanceLabel.setText("Balance: $" + this.balance);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(6, 4, new Insets(40, 40, 40, 40), -1, -1));
        buyButton = new JButton();
        buyButton.setText("Buy");
        mainPanel.add(buyButton, new GridConstraints(3, 1, 1, 3, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        quantityField = new JTextField();
        quantityField.setText("");
        mainPanel.add(quantityField, new GridConstraints(2, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        quantityLabel = new JLabel();
        quantityLabel.setText("Quantity:");
        mainPanel.add(quantityLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        responseLabel = new JLabel();
        responseLabel.setText("");
        responseLabel.setVisible(false);
        mainPanel.add(responseLabel, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        symbolLabel = new JLabel();
        symbolLabel.setText("_");
        mainPanel.add(symbolLabel, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buyStockLabel = new JLabel();
        buyStockLabel.setText("Buy Stock:");
        mainPanel.add(buyStockLabel, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        goBackButton = new JButton();
        goBackButton.setText("Go Back");
        mainPanel.add(goBackButton, new GridConstraints(4, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(91, 30), null, 0, false));
        balanceLabel = new JLabel();
        balanceLabel.setText("Balance: $");
        mainPanel.add(balanceLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}