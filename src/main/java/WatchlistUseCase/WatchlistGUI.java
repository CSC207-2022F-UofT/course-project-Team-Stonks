package WatchlistUseCase;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;

public class WatchlistGUI extends JFrame implements iWatchlistGUI {

    private JButton addButton;
    private JButton removeButton;
    private JButton backButton;
    private JList<String> watchlistList;
    private JPanel rootPanel;

    public WatchlistGUI() {

        addButton = new JButton("Add");
        removeButton = new JButton("Remove");
        backButton = new JButton("Close");
        watchlistList = new JList<>();

        setLayout(new BorderLayout());
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(1, 3));
        buttonPanel.add(addButton);
        buttonPanel.add(removeButton);
        buttonPanel.add(backButton);
        add(buttonPanel, BorderLayout.NORTH);

        backButton.addActionListener(event -> {
            dispose();
        });

        addButton.addActionListener(event -> {
            WatchlistAddGUI addGUI = new WatchlistAddGUI();
            addGUI.setVisible(true);
        });

        add(watchlistList, BorderLayout.CENTER); 
        setVisible(true);
        pack();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        setTitle("Watchlist");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pack();
        setLocationRelativeTo(null);
        setVisible(true);

        
        setSize(600, 600); 
        setLocationRelativeTo(null); 
    }

    public static void main(String username) {
        new WatchlistGUI();
    }

    // getWatchlistPanel() must show WatchlistGUI
    public JPanel getWatchlistPanel() {
        return rootPanel;
    }

    public void addAddAction(Runnable onAdd) {
        addButton.addActionListener(e -> onAdd.run());

    }

    public void addRemoveAction(Runnable onRemove) {
        removeButton.addActionListener(e -> onRemove.run());
    }

    public void addBackAction(Runnable onBack) {
        backButton.addActionListener(e -> onBack.run());
    }

    {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(2, 2, new Insets(10, 10, 10, 10), -1, -1));
        addButton = new JButton();
        addButton.setText("Add");
        rootPanel.add(addButton,
                new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        removeButton = new JButton();
        removeButton.setText("Remove");
        // Add a back button a the bottom of the GUI with the text of close
        backButton = new JButton();
        backButton.setText("Close");
        rootPanel.add(backButton,
                new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        rootPanel.add(scrollPane1,
                new GridConstraints(0, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null,
                        0, false));
        // add a list to the GUI to list all the watchlist from the controller.
        watchlistList = new JList();
        scrollPane1.setViewportView(watchlistList); 
        

    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}